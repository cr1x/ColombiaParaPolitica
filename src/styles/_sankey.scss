// colors
@use 'colors' as color;

body {
  height: 100%;
  min-height: 100vh;
  background: color.$bg;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: space-between;
}

@mixin para-scale($attr...) {
  @for $i from 0 through color.$stops {
    @each $atr in $attr {
      .para--0 {
        #{$atr}: mix(color.$para, color.$nopara, 0%);
      }

      .para--25 {
        #{$atr}: mix(color.$para, color.$nopara, 30%);
      }

      .para--50 {
        #{$atr}: mix(color.$para, color.$nopara, 60%);
      }

      .para--75,
      .para--100 {
        #{$atr}: mix(color.$para, color.$nopara, 100%);
      }
    }
  }
}

@mixin para-gradient() {

  // @for $i from 0 through color.$stops {
  //   &--#{($i * 20)} {
  //     .stop {
  //       stop-color: mix(color.$para, color.$nopara, $i * 20%);
  //     }
  //   }
  // }
  &--0 {
    .stop {
      stop-color: mix(color.$para, color.$nopara, 0%);
    }
  }

  &--25 {
    .stop {
      stop-color: mix(color.$para, color.$nopara, 30%);
    }
  }

  &--50 {
    .stop {
      stop-color: mix(color.$para, color.$nopara, 60%);
    }
  }

  &--100 {
    .stop {
      stop-color: mix(color.$para, color.$nopara, 100%);
    }
  }
}

@mixin ppColor($attr...) {

  @each $pp-name,
  $pp-color in color.$partidos {
    &--#{$pp-name} {
      @each $atr in $attr {
        #{$atr}: $pp-color;
      }
    }
  }
}

@mixin bgDark($attr, $amount) {
  #{$attr}: darken(color.$bg, $amount * 1%);
}

#dataviz {
  width: 100vw;
  height: 60vh;
  min-height: 470px;
  margin: 20px 0;
  background: color.$bg;
  position: relative;
}

#sTooltip {
  z-index: 1000;
  opacity: 0;
  position: absolute;
  width: 220px;
  height: 0;
  pointer-events: none;
  transform: translate(-50%, 0);
  transition: opacity .3s ease-out;

  &--content {
    background-color: color.$toolTip;
    position: absolute;
    padding: 1rem 1.5rem 1rem 1.5rem;
    bottom: 100%;
    margin-bottom: 0.6rem;
    left: 50%;
    width: 100%;
    height: auto;
    overflow: hidden;
    border-radius: 2px;
    color: color.$bg;
    transform: translateX(calc(var(--mouse-x) * -1%));
    transition: background-color .3s ease-out;

    &.pp {
      color: color.$toolTip;
      @include ppColor(background-color);
    }
  }

  &--mark {
    width: 1rem;
    height: 0.6rem;
    position: absolute;
    left: 50%;
    bottom: 100%;
    border-left: solid transparent 0.5rem;
    border-right: solid transparent 0.5rem;
    border-top-style: solid;
    border-top-width: 0.6rem;
    border-top-color: color.$toolTip;
    transform: translateX(calc(var(--mouse-x) * -1%));
    transition: border-top-color .3s ease-out;

    &.pp {
      @include ppColor(border-top-color);
    }
  }
}

.project-ellipsis {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  white-space: pre-wrap;
}

.pattern {
  &--c1 {
    fill: #ef5375;
  }
}

#options {
  path {
    stroke: color.$nopara;
    stroke-opacity: 0.7;

    &:nth-of-type(2) {
      mask: url(#maskC2);
    }
  }

  @include para-scale(fill);

  rect {
    &:nth-of-type(n+5) {
      mask: url(#maskC2);
    }
  }
}

.link {
  opacity: 0.6;
  // transition: opacity 180ms linear;
  // mix-blend-mode: multiply;
  fill: none;

  &.fixed2 {
    opacity: .7;
    // transition: opacity .3s linear;
  }

  &.over {
    opacity: .9;
  }

  &.anno {
    &.para {
      stroke: none;
      @include para-scale(fill);
    }
  }

  &.topic {
    &.para {
      @include para-scale(stroke);
    }
  }

  &.aut {
    @include bgDark(stroke, 20);
    opacity: 0.07;

    // mix-blend-mode: multiply;
    &.para {
      .para {
        &--0 {
          // stroke: scale-color(color.$nopara, $alpha: -82%);
          stroke: color.$nopara;
        }

        &--100 {
          // stroke: scale-color(color.$para, $alpha: -92%);
          stroke: color.$para;
          opacity: 0.5;
        }
      }
    }
  }

  &.pol,
  &.proj {
    &.camara {
      mask: url(#maskC2);
    }

    &.para {
      .para {
        &--0 {
          stroke: color.$nopara;
        }

        &--100 {
          stroke: color.$para;
        }
      }
    }

    .pp {
      @include ppColor(stroke);
    }
  }

  &.pol {
    opacity: 0;

    &.over {
      opacity: .9;
    }
  }
}

.bgLink {
  opacity: 0.6;

  &.camara {
    mask: url(#maskC2);
  }

  &.para {
    .para {
      &--0 {
        fill: color.$nopara;
      }

      &--100 {
        fill: color.$para;
      }
    }
  }

  .pp {
    @include ppColor(fill);
  }
}

.node {
  pointer-events: bounding-box;
  cursor: pointer;
  stroke: none;
  fill: transparent;

  .bgTopic {
    fill: color.$bg;
    pointer-events: none;
  }

  &.para {
    @include para-scale(fill);
  }

  .title--value {
    @include bgDark(fill, 20);
    pointer-events: none;
  }

  .title--topic {
    @include bgDark(fill, 50);
  }

  .ppRect {
    // stroke: color.$bg;
  }

  .pp {
    @include ppColor(fill);
  }

  .nRect {
    stroke: none;
    transition: fill .3s linear;

    .fixed & {
      fill: blue;
      transition: fill .5s ease;
    }

    .fixed2 & {
      fill: rgb(170, 135, 251);
      transition: fill 0.5s ease-out;
    }
  }

  &.autor {
    .nRect {
      @include bgDark(fill, 20);
    }

    text {
      // fill: scale-color(color.$nopara, $blackness: 90%);
      // @include bgDark(fill, 20);
    }

    .old {
      // @include bgDark(fill, 20);
      opacity: 0.07;

      &--2 {
        @include bgDark(fill, 20);
        // mix-blend-mode: multiply;
      }
    }

    &.para {
      .para {
        &--100 {
          fill: color.$para;
        }

        &--0 {
          fill: color.$nopara;
        }
      }

      text {
        &.para {
          &--100 {
            fill: darken(color.$para, 4%);
          }

          &--0 {
            fill: darken(color.$nopara, 10%);
          }
        }
      }

      .old--2 {

        // fill-opacity: 0.5;
        &.para {
          &--0 {
            // fill: scale-color(color.$nopara, $alpha: -82%);
          }

          &--100 {
            // fill: scale-color(color.$para, $alpha: -92%);
            opacity: 0.04;
          }
        }
      }
    }
  }

  &.lapse,
  &.pol {
    &.para {
      .title--value {
        @include bgDark(fill, 50);
      }
    }
  }

  &.anno,
  &.topic {
    pointer-events: auto;

    &.para {

      // @include para-scale(fill);
      @for $i from 0 through color.$stops {
        .nRect {
          // &.para--#{($i * 20)} {
          //   $tone: mix(color.$para, color.$nopara, $i * 20%);
          //   fill: url("#gradTema--#{($i * 20)}") $tone;
          // }
          // @include para-scale(fill);
        }
      }

      .title--value {
        fill: color.$bg;
      }
    }
  }

  &.proj {
    &.para {
      .nRect {
        // fill-opacity: 0.7;
      }
    }
  }
}

#gradYear {
  .stop {
    &--Year0 {
      stop-color: darken(color.$bg, 30%);
    }

    // &--Year1 {
    //   stop-color: mix(darken(color.$bg, 30%), white, 50%);
    // }
    &--Year2 {
      stop-color: white;
    }
  }
}

.yearLine {
  fill: none;
  stroke-opacity: 1;
  // stroke: url(#gradYear);
  stroke: white;
  stroke-width: 1;
  stroke-dasharray: 3 4;
  // mix-blend-mode: multiply;
  // mix-blend-mode: hard-light;
  pointer-events: none;

  &:nth-last-of-type(1) {
    // @include bgDark(stroke, 40);
  }
}

// .yearLine:nth-of-type(n+5):nth-of-type(-n+8) {
//   // @include bgDark(stroke, 8);
//   // stroke: white;
//   // @include bgDark(stroke, 40);
//   // stroke-width: 1;
//   // stroke-dasharray: 2.5;
//   // stroke-opacity: 0.8;
//   // mix-blend-mode: hard-light;
// }
#years {
  text {
    @include bgDark(fill, 50);
  }

  // .titleCol {
  //   text:nth-of-type(2) {
  //     fill: color.$bg;
  //   }
  //   .titleBold {
  //     @include bgDark(fill, 50);
  //   }
  //   &:nth-of-type(3) {
  //     text:nth-of-type(2) {
  //       @include bgDark(fill, 50);
  //     }
  //   }
  // }
}

.partido {
  rect {
    fill: color.$bg;

    &.pp {
      @include ppColor(fill);
    }
  }
}

.pNameBox {
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.pName {
  @include bgDark(color, 50);
  text-align: center;
  white-space: nowrap;
  overflow-x: hidden;
  text-overflow: ellipsis;
  letter-spacing: 0.5;
}

#gradients {
  pointer-events: none;
}

#gradDouble,
#gradSingle {
  @include para-gradient();
}

.grad {
  // mask: url(#maskGrad);
}

.gradDouble {
  stroke: none;
  mask: url(#maskGrad);

  &.para {

    // @for $i from 0 through color.$stops {
    //   .para--#{($i * 20)} {
    //     $tone: mix(color.$para, color.$nopara, $i * 20%);
    //     fill: url('#gradDouble--#{($i * 20)}') $tone;
    //   }
    // }
    .para--0 {
      // $tone: mix(color.$para, color.$nopara, 0%);
      fill: url('#gradDouble--0');
    }

    .para--25 {
      fill: url('#gradDouble--25');
    }

    .para--50 {
      fill: url('#gradDouble--50');
    }

    .para--100 {
      fill: url('#gradDouble--100');
    }
  }
}

.grad3 {
  mask: url(#maskGrad);
}

.gradSingle {
  stroke: none;

  &.para {

    // @for $i from 0 through color.$stops {
    //   .para--#{($i * 20)} {
    //     $tone: mix(color.$para, color.$nopara, $i * 20%);
    //     fill: url('#gradSingle--#{($i * 20)}') $tone;
    //   }
    // }
    .para--0 {
      // $tone: mix(color.$para, color.$nopara, 0%);
      fill: url('#gradSingle--0');
    }

    .para--25 {
      fill: url('#gradSingle--25');
    }

    .para--50 {
      fill: url('#gradSingle--50');
    }

    .para--100 {
      fill: url('#gradSingle--100');
    }
  }
}

#switchBox {
  width: fit-content;
  position: absolute;
  top: 5px;
  right: 2%;
}

input {
  &[type=checkbox] {
    height: 0;
    width: 0;
    visibility: hidden;
  }
}

$switch-size: 1rem;
$switch-padd: calc($switch-size / 6);
$switch-knob: calc($switch-size - $switch-padd * 2);

.switch {
  &--label {
    // height: 100%;
    width: fit-content;
    padding: 0 10px;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    gap: 6px;
    user-select: none;
    cursor: pointer;
  }

  &--button {
    position: relative;
    cursor: pointer;
    margin: 0;
    padding: 0;
    display: inline-flex;
    align-items: center;
    height: $switch-size;
    width: $switch-size * 1.8;
    border-radius: 100px;
    background: color.$nopara;
    transition: background 320ms ease;

    &:after {
      content: "";
      position: absolute;
      left: $switch-padd;
      top: $switch-padd;
      display: block;
      pointer-events: none;
      height: $switch-knob;
      width: $switch-knob;
      background: color.$bg;
      border-radius: 100px;
      transition: left 320ms cubic-bezier(0.68, -0.55, 0.27, 01.55);
    }

    &[aria-checked="true"] {
      background: color.$para;

      &:after {
        left: calc(100% - ($switch-padd + $switch-knob));
      }
    }
  }
}

footer {
  width: 100vw;
  height: 10vh;
  @include bgDark(background, 3);
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
  justify-content: flex-end;
  padding: 10px 20px;
}

.lucide {
  @include bgDark(stroke, 40);
  stroke-width: 1.2;
  width: 24;
  transition: stroke 250ms ease-out;

  &:hover {
    @include bgDark(stroke, 60);
  }
}

footer {
  a {
    width: fit-content;
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    // border: 1px solid red;
  }
}
